name: Release

on:
  push:
    tags:
      - v*.*.*

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binaries:
    name: Build release artifacts (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          components: rustfmt, clippy
          override: true
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-release
      - name: Cargo build
        run: cargo build --release --workspace --target ${{ matrix.target }}
      - name: Package binaries (unix)
        if: runner.os != 'Windows'
        run: |
          tar -czf edge-policy-hub-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release .
      - name: Package binaries (windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path target/${{ matrix.target }}/release/* -DestinationPath edge-policy-hub-${{ matrix.target }}.zip
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: edge-policy-hub-${{ matrix.target }}
          path: |
            edge-policy-hub-${{ matrix.target }}.tar.gz
            edge-policy-hub-${{ matrix.target }}.zip
          if-no-files-found: ignore

  build-tauri:
    name: Build Tauri installers (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          components: rustfmt, clippy
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./apps/tauri-ui/src-tauri -> target"
      - name: Install dependencies
        working-directory: apps/tauri-ui
        run: pnpm install
      - name: Build Tauri app
        working-directory: apps/tauri-ui
        run: pnpm tauri build
      - name: Upload Tauri artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.os }}
          path: apps/tauri-ui/src-tauri/target/release/bundle/**/*
          if-no-files-found: ignore

  build-docker:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push enforcer
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/docker/Dockerfile.enforcer
          push: true
          tags: ghcr.io/acailic/edge-policy-enforcer:${{ github.ref_name }},ghcr.io/acailic/edge-policy-enforcer:latest
          platforms: linux/amd64,linux/arm64
      - name: Build and push proxy-http
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/docker/Dockerfile.proxy-http
          push: true
          tags: ghcr.io/acailic/edge-policy-proxy-http:${{ github.ref_name }},ghcr.io/acailic/edge-policy-proxy-http:latest
          platforms: linux/amd64,linux/arm64
      - name: Build and push bridge-mqtt
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/docker/Dockerfile.bridge-mqtt
          push: true
          tags: ghcr.io/acailic/edge-policy-bridge-mqtt:${{ github.ref_name }},ghcr.io/acailic/edge-policy-bridge-mqtt:latest
          platforms: linux/amd64,linux/arm64
      - name: Build and push audit-store
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/docker/Dockerfile.audit-store
          push: true
          tags: ghcr.io/acailic/edge-policy-audit-store:${{ github.ref_name }},ghcr.io/acailic/edge-policy-audit-store:latest
          platforms: linux/amd64,linux/arm64
      - name: Build and push quota-tracker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/docker/Dockerfile.quota-tracker
          push: true
          tags: ghcr.io/acailic/edge-policy-quota-tracker:${{ github.ref_name }},ghcr.io/acailic/edge-policy-quota-tracker:latest
          platforms: linux/amd64,linux/arm64

  sign-and-release:
    name: Sign Tauri updates and create release
    needs: [build-binaries, build-tauri, build-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: true
          path: dist
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli
      - name: Generate and sign latest.json
        run: |
          tauri signer generate -w ~/.tauri/edge-policy-hub.key
          PUBLIC_KEY=$(grep -Eo '-----BEGIN PUBLIC KEY-----.*-----END PUBLIC KEY-----' ~/.tauri/edge-policy-hub.key.pub | tr -d '\n' | sed 's/-----BEGIN PUBLIC KEY-----//;s/-----END PUBLIC KEY-----//')
          echo "PUBLIC_KEY=$PUBLIC_KEY" >> $GITHUB_ENV
          tauri signer sign -k ~/.tauri/edge-policy-hub.key -b latest.json dist/
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      - name: Upload latest.json
        uses: actions/upload-artifact@v4
        with:
          name: latest-json
          path: latest.json
      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
