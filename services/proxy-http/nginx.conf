# Nginx configuration with OPA integration
# This configuration provides an alternative to Envoy for HTTP reverse proxy with policy enforcement

events {
    worker_connections 1024;
}

http {
    # Upstream OPA service
    upstream opa_service {
        server 127.0.0.1:8181;
        keepalive 32;
    }

    # Upstream backend
    upstream backend {
        server ${UPSTREAM_HOST}:${UPSTREAM_PORT};
        keepalive 32;
    }

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # JWT validation via auth_request
    map $http_authorization $jwt_token {
        "~^Bearer (.*)$" $1;
        default "";
    }

    # Server block for HTTP (with optional JWT)
    server {
        listen 8080 ssl http2;
        server_name _;

        # TLS configuration
        ssl_certificate /etc/nginx/certs/server-cert.pem;
        ssl_certificate_key /etc/nginx/certs/server-key.pem;
        ssl_client_certificate /etc/nginx/certs/ca-cert.pem;
        ssl_verify_client optional;
        ssl_verify_depth 2;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Request size limits
        client_max_body_size 10M;
        client_body_buffer_size 128k;

        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        location / {
            # Step 1: Query OPA for authorization decision
            auth_request /_opa_authz;
            auth_request_set $opa_allow $upstream_http_x_opa_allow;
            auth_request_set $opa_redact $upstream_http_x_opa_redact;

            # Forward client certificate info if present
            proxy_set_header X-Client-Cert-Subject $ssl_client_s_dn;
            proxy_set_header X-Client-Cert-Issuer $ssl_client_i_dn;
            proxy_set_header X-Client-Cert-Verify $ssl_client_verify;

            # Forward JWT token
            proxy_set_header X-JWT-Token $jwt_token;

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Forward to backend
            proxy_pass https://backend;
            proxy_ssl_certificate /etc/nginx/certs/client-cert.pem;
            proxy_ssl_certificate_key /etc/nginx/certs/client-key.pem;
            proxy_ssl_verify off;

            # Enable HTTP/2 and HTTP/1.1
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Internal location for OPA authorization
        location = /_opa_authz {
            internal;

            # Build OPA input from request context
            proxy_method POST;
            proxy_pass http://opa_service/v1/data/edge_policy/authz/allow;

            proxy_set_header Content-Type "application/json";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Client-Cert-Subject $ssl_client_s_dn;
            proxy_set_header X-JWT-Token $jwt_token;

            # Pass request body for policy evaluation
            proxy_pass_request_body on;
            proxy_set_body '{"input":{"request":{"method":"$request_method","path":"$uri","headers":{"authorization":"$http_authorization","x-tenant-id":"$http_x_tenant_id"},"remote_addr":"$remote_addr","ssl_client_s_dn":"$ssl_client_s_dn"}}}';
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Server block for mTLS (requires client certificate)
    server {
        listen 8443 ssl http2;
        server_name _;

        # TLS configuration with mandatory client certs
        ssl_certificate /etc/nginx/certs/server-cert.pem;
        ssl_certificate_key /etc/nginx/certs/server-key.pem;
        ssl_client_certificate /etc/nginx/certs/ca-cert.pem;
        ssl_verify_client on;
        ssl_verify_depth 2;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        client_max_body_size 10M;
        client_body_buffer_size 128k;

        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        location / {
            auth_request /_opa_authz_mtls;
            auth_request_set $opa_allow $upstream_http_x_opa_allow;

            proxy_set_header X-Client-Cert-Subject $ssl_client_s_dn;
            proxy_set_header X-Client-Cert-Issuer $ssl_client_i_dn;
            proxy_set_header X-Client-Cert-Serial $ssl_client_serial;
            proxy_set_header X-Client-Cert-Fingerprint $ssl_client_fingerprint;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass https://backend;
            proxy_ssl_certificate /etc/nginx/certs/client-cert.pem;
            proxy_ssl_certificate_key /etc/nginx/certs/client-key.pem;
            proxy_ssl_verify off;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location = /_opa_authz_mtls {
            internal;

            proxy_method POST;
            proxy_pass http://opa_service/v1/data/edge_policy/authz/allow;

            proxy_set_header Content-Type "application/json";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Client-Cert-Subject $ssl_client_s_dn;

            proxy_pass_request_body on;
            proxy_set_body '{"input":{"request":{"method":"$request_method","path":"$uri","headers":{"x-tenant-id":"$http_x_tenant_id"},"remote_addr":"$remote_addr","ssl_client_s_dn":"$ssl_client_s_dn","ssl_client_serial":"$ssl_client_serial"}}}';
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
